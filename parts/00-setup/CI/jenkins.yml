---
# Source: jenkins/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jenkins
  namespace: continuous-integration
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-4.3.0"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-controller"
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: jenkins
  namespace: continuous-integration
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["create","delete","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create","delete","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["pods/log"]
  verbs: ["get","list","watch"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["create", "get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["services"]
  verbs: ["create", "get","list","patch","update","watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: jenkins
  namespace: continuous-integration
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jenkins
subjects:
- kind: ServiceAccount
  name: jenkins
---
# Source: jenkins/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: jenkins
  namespace: continuous-integration
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-4.3.0"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-controller"
type: Opaque
data:
  jenkins-admin-password: "YWRtaW4="
  jenkins-admin-user: "YWRtaW4="
---
# Source: jenkins/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: jenkins
  namespace: continuous-integration
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-controller"
data:
  apply_config.sh: |-
    set -e
    echo "disable Setup Wizard"
    # Prevent Setup Wizard when JCasC is enabled
    echo $JENKINS_VERSION > /var/jenkins_home/jenkins.install.UpgradeWizard.state
    echo $JENKINS_VERSION > /var/jenkins_home/jenkins.install.InstallUtil.lastExecVersion
    echo "download plugins"
    # Install missing plugins
    cp /var/jenkins_config/plugins.txt /var/jenkins_home;
    rm -rf /usr/share/jenkins/ref/plugins/*.lock
    version () { echo "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }'; }
    if [ -f "/usr/share/jenkins/jenkins.war" ] && [ -n "$(command -v jenkins-plugin-cli)" 2>/dev/null ] && [ $(version $(jenkins-plugin-cli --version)) -ge $(version "2.1.1") ]; then
      jenkins-plugin-cli --verbose --war "/usr/share/jenkins/jenkins.war" --plugin-file "/var/jenkins_home/plugins.txt" --latest true;
    else
      /usr/local/bin/install-plugins.sh `echo $(cat /var/jenkins_home/plugins.txt)`;
    fi
    echo "copy plugins to shared volume"
    # Copy plugins to shared volume
    yes n | cp -i /usr/share/jenkins/ref/plugins/* /var/jenkins_plugins/;
    echo "finished initialization"
  plugins.txt: |-
    antisamy-markup-formatter:162.v0e6ec0fcfcf6
    apache-httpcomponents-client-4-api:4.5.14-208.v438351942757
    apache-httpcomponents-client-5-api:5.2.3-1.0
    authentication-tokens:1.53.v1c90fd9191a_b_
    bootstrap5-api:5.3.2-3
    bouncycastle-api:2.30.1.77-225.v26ea_c9455fd9
    branch-api:2.1135.v8de8e7899051
    caffeine-api:3.1.8-133.v17b_1ff2e0599
    cloud-stats:320.v96b_65297a_4b_b_
    cloudbees-folder:6.858.v898218f3609d
    command-launcher:107.v773860566e2e
    commons-lang3-api:3.13.0-62.v7d18e55f51e2
    commons-text-api:1.11.0-95.v22a_d30ee5d36
    configuration-as-code:1763.vb_fe9c1b_83f7b
    credentials-binding:642.v737c34dea_6c2
    credentials:1311.vcf0a_900b_37c2
    display-url-api:2.200.vb_9327d658781
    docker-commons:439.va_3cb_0a_6a_fb_29
    docker-java-api:3.3.4-86.v39b_a_5ede342c
    docker-plugin:1.5
    durable-task:523.va_a_22cf15d5e0
    font-awesome-api:6.5.1-1
    git-client:4.6.0
    git:5.2.1
    gson-api:2.10.1-3.vb_25b_599b_e4f8
    instance-identity:185.v303dc7c645f9
    ionicons-api:56.v1b_1c8c49374e
    jackson2-api:2.15.3-372.v309620682326
    jakarta-activation-api:2.0.1-3
    jakarta-mail-api:2.0.1-3
    javax-activation-api:1.2.0-6
    javax-mail-api:1.6.2-9
    jaxb:2.3.9-1
    jdk-tool:73.vddf737284550
    json-api:20231013-3.v20f3c247f2fe
    json-path-api:2.8.0-5.v07cb_a_1ca_738c
    kubernetes-client-api:6.8.1-224.vd388fca_4db_3b_
    kubernetes-credentials:0.11
    kubernetes-pipeline-devops-steps:1.6
    kubernetes:4151.v6fa_f0fb_0b_4c9
    mailer:463.vedf8358e006b_
    metrics:4.2.18-442.v02e107157925
    mina-sshd-api-common:2.11.0-86.v836f585d47fa_
    mina-sshd-api-core:2.11.0-86.v836f585d47fa_
    okhttp-api:4.11.0-157.v6852a_a_fa_ec11
    pipeline-build-step:540.vb_e8849e1a_b_d8
    pipeline-groovy-lib:689.veec561a_dee13
    pipeline-input-step:477.v339683a_8d55e
    pipeline-milestone-step:111.v449306f708b_7
    pipeline-model-api:2.2151.ve32c9d209a_3f
    pipeline-model-definition:2.2151.ve32c9d209a_3f
    pipeline-model-extensions:2.2151.ve32c9d209a_3f
    pipeline-stage-step:305.ve96d0205c1c6
    pipeline-stage-tags-metadata:2.2151.ve32c9d209a_3f
    plain-credentials:143.v1b_df8b_d3b_e48
    plugin-util-api:3.8.0
    prism-api:1.29.0-10
    scm-api:683.vb_16722fb_b_80b_
    script-security:1294.v99333c047434
    snakeyaml-api:2.2-111.vc6598e30cc65
    ssh-credentials:308.ve4497b_ccd8f4
    ssh-slaves:2.947.v64ee6b_f87b_c1
    sshd:3.312.v1c601b_c83b_0e
    structs:325.vcb_307d2a_2782
    token-macro:400.v35420b_922dcb_
    trilead-api:2.133.vfb_8a_7b_9c5dd1
    variant:60.v7290fc0eb_b_cd
    workflow-aggregator:596.v8c21c963d92d
    workflow-api:1283.v99c10937efcb_
    workflow-basic-steps:1042.ve7b_140c4a_e0c
    workflow-cps:3826.v3b_5707fe44da_
    workflow-durable-task-step:1313.vcb_970b_d2a_fb_3
    workflow-job:1385.vb_58b_86ea_fff1
    workflow-multibranch:756.v891d88f2cd46
    workflow-scm-step:415.v434365564324
    workflow-step-api:639.v6eca_cd8c04a_a_
    workflow-support:865.v43e78cc44e0d
---
# Source: jenkins/templates/jcasc-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "jenkins-jenkins-jcasc-config"
  namespace: continuous-integration
  labels:
    "app.kubernetes.io/name": jenkins
    "helm.sh/chart": "jenkins-4.3.0"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-controller"
    jenkins-jenkins-config: "true"
data:
  jcasc-default-config.yaml: |-
    jenkins:
      systemMessage: "Jenkins configured automatically by Jenkins Configuration as Code plugin\n\n"
      authorizationStrategy:
        loggedInUsersCanDoAnything:
          allowAnonymousRead: false
      securityRealm:
        local:
          allowsSignup: false
          enableCaptcha: false
          users:
            - id: "admin"
              name: "Jenkins Admin"
              password: "admin"
      disableRememberMe: false
      mode: NORMAL
      numExecutors: 0
      labelString: ""
      projectNamingStrategy: "standard"
      markupFormatter: plainText
      clouds:
        - kubernetes:
            containerCapStr: "10"
            defaultsProviderTemplate: ""
            connectTimeout: "5"
            readTimeout: "15"
            jenkinsUrl: "http://jenkins.continuous-integration.svc.cluster.local:8080"
            jenkinsTunnel: "jenkins-agent.continuous-integration.svc.cluster.local:50000"
            maxRequestsPerHostStr: "32"
            name: "kubernetes"
            namespace: "continuous-integration"
            serverUrl: "https://kubernetes.default"
            podLabels:
              - key: "jenkins/jenkins-jenkins-agent"
                value: "true"
            templates:
              - name: "default"
                namespace: "continuous-integration"
                containers:
                  - name: "jnlp"
                    alwaysPullImage: false
                    command:
                    envVars:
                      - envVar:
                          key: "JENKINS_URL"
                          value: "http://jenkins.continuous-integration.svc.cluster.local:8080/"
                    image: "jenkins/inbound-agent:4.11.2-4"
                    privileged: "false"
                    resourceLimitCpu: 512m
                    resourceLimitMemory: 512Mi
                    resourceRequestCpu: 512m
                    resourceRequestMemory: 512Mi
                    runAsUser:
                    runAsGroup:
                    ttyEnabled: false
                    workingDir: /home/jenkins/agent
                idleMinutes: 0
                instanceCap: 2147483647
                label: "jenkins-jenkins-agent "
                nodeUsageMode: "NORMAL"
                podRetention: Never
                showRawYaml: true
                serviceAccount: "default"
                slaveConnectTimeoutStr: "100"
                yamlMergeStrategy: override
      crumbIssuer:
        standard:
          excludeClientIPFromCrumb: true
    security:
      apiToken:
        creationOfLegacyTokenEnabled: false
        tokenGenerationOnCreationEnabled: false
        usageStatisticsEnabled: true
    unclassified:
      location:
        adminAddress:
        url: http://localhost:30332

---
# Source: jenkins/templates/home-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: jenkins
  namespace: continuous-integration
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-4.3.0"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-controller"
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
---
# Source: jenkins/templates/rbac.yaml
# This role is used to allow Jenkins scheduling of agents via Kubernetes plugin.
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: jenkins-schedule-agents
  namespace: continuous-integration
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-4.3.0"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-controller"
rules:
- apiGroups: [""]
  resources: ["pods", "pods/exec", "pods/log", "persistentvolumeclaims", "events"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods", "pods/exec", "persistentvolumeclaims"]
  verbs: ["create", "delete", "deletecollection", "patch", "update"]
---
# Source: jenkins/templates/rbac.yaml
# The sidecar container which is responsible for reloading configuration changes
# needs permissions to watch ConfigMaps
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: jenkins-casc-reload
  namespace: continuous-integration
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-4.3.0"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-controller"
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "watch", "list"]
---
# Source: jenkins/templates/rbac.yaml
# We bind the role to the Jenkins service account. The role binding is created in the namespace
# where the agents are supposed to run.
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: jenkins-schedule-agents
  namespace: continuous-integration
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-4.3.0"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-controller"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jenkins-schedule-agents
subjects:
- kind: ServiceAccount
  name: jenkins
  namespace: continuous-integration
---
# Source: jenkins/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: jenkins-watch-configmaps
  namespace: continuous-integration
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-4.3.0"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-controller"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jenkins-casc-reload
subjects:
- kind: ServiceAccount
  name: jenkins
  namespace: continuous-integration
---
# Source: jenkins/templates/jenkins-agent-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: jenkins-agent
  namespace: continuous-integration
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-4.3.0"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-controller"
spec:
  ports:
    - port: 50000
      targetPort: 50000
      name: agent-listener
  selector:
    "app.kubernetes.io/component": "jenkins-controller"
    "app.kubernetes.io/instance": "jenkins"
  type: ClusterIP
---
# Source: jenkins/templates/jenkins-controller-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: jenkins
  namespace: continuous-integration
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-4.3.0"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-controller"
spec:
  ports:
    - port: 8080
      name: http
      targetPort: 8080
      nodePort: 30332
  selector:
    "app.kubernetes.io/component": "jenkins-controller"
    "app.kubernetes.io/instance": "jenkins"
  type: NodePort
---
# Source: jenkins/templates/jenkins-controller-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: jenkins
  namespace: continuous-integration
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-4.3.0"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-controller"
spec:
  serviceName: jenkins
  replicas: 1
  selector:
    matchLabels:
      "app.kubernetes.io/component": "jenkins-controller"
      "app.kubernetes.io/instance": "jenkins"
  template:
    metadata:
      labels:
        "app.kubernetes.io/name": 'jenkins'
        "app.kubernetes.io/managed-by": "Helm"
        "app.kubernetes.io/instance": "jenkins"
        "app.kubernetes.io/component": "jenkins-controller"
      annotations:
        checksum/config: 9bf8260a3169088d5d5d06c8ffa7bfe9153a2bfb02dca3e1335f56275ab17fb0
    spec:
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
        runAsNonRoot: true
      serviceAccountName: "jenkins"
      initContainers:
        - name: "init"
          image: "jenkins/jenkins:2.437-jdk17"
          imagePullPolicy: "Always"
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 1000
            runAsUser: 1000
          command: [ "sh", "/var/jenkins_config/apply_config.sh" ]
          resources:
            limits:
              cpu: 2000m
              memory: 4096Mi
            requests:
              cpu: 50m
              memory: 256Mi
          volumeMounts:
            - mountPath: /var/jenkins_home
              name: jenkins-home
            - mountPath: /var/jenkins_config
              name: jenkins-config
            - mountPath: /usr/share/jenkins/ref/plugins
              name: plugins
            - mountPath: /var/jenkins_plugins
              name: plugin-dir
            - mountPath: /tmp
              name: tmp-volume
      containers:
        - name: jenkins
          image: "jenkins/jenkins:2.437-jdk17"
          imagePullPolicy: "Always"
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 1000
            runAsUser: 1000
          args: [ "--httpPort=8080"]
          env:
            - name: SECRETS
              value: /run/secrets/additional
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: JAVA_OPTS
              value: >-
                 -Dcasc.reload.token=$(POD_NAME) 
            - name: JENKINS_OPTS
              value: >-
                 --webroot=/var/jenkins_cache/war 
            - name: JENKINS_SLAVE_AGENT_PORT
              value: "50000"

            - name: CASC_JENKINS_CONFIG
              value: /var/jenkins_home/casc_configs
          ports:
            - containerPort: 8080
              name: http
            - containerPort: 50000
              name: agent-listener
          startupProbe:
            failureThreshold: 12
            httpGet:
              path: '/login'
              port: http
            periodSeconds: 10
            timeoutSeconds: 5
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: '/login'
              port: http
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: '/login'
              port: http
            periodSeconds: 10
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 2000m
              memory: 4096Mi
            requests:
              cpu: 50m
              memory: 256Mi
          volumeMounts:
            - mountPath: /var/jenkins_home
              name: jenkins-home
              readOnly: false
            - mountPath: /var/jenkins_config
              name: jenkins-config
              readOnly: true
            - mountPath: /usr/share/jenkins/ref/plugins/
              name: plugin-dir
              readOnly: false
            - name: sc-config-volume
              mountPath: /var/jenkins_home/casc_configs
            - name: jenkins-secrets
              mountPath: /run/secrets/additional
              readOnly: true
            - name: jenkins-cache
              mountPath: /var/jenkins_cache
            - mountPath: /tmp
              name: tmp-volume
        - name: config-reload
          image: "kiwigrid/k8s-sidecar:1.15.0"
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: LABEL
              value: "jenkins-jenkins-config"
            - name: FOLDER
              value: "/var/jenkins_home/casc_configs"
            - name: NAMESPACE
              value: 'continuous-integration'
            - name: REQ_URL
              value: "http://localhost:8080/reload-configuration-as-code/?casc-reload-token=$(POD_NAME)"
            - name: REQ_METHOD
              value: "POST"
            - name: REQ_RETRY_CONNECT
              value: "10"
          resources:
            {}
          volumeMounts:
            - name: sc-config-volume
              mountPath: "/var/jenkins_home/casc_configs"
            - name: jenkins-home
              mountPath: /var/jenkins_home

      volumes:
      - name: plugins
        emptyDir: {}
      - name: jenkins-config
        configMap:
          name: jenkins
      - name: plugin-dir
        emptyDir: {}
      - name: jenkins-secrets
        projected:
          sources:
          - secret:
              name: jenkins
              items:
                - key: jenkins-admin-user
                  path: chart-admin-username
                - key: jenkins-admin-password
                  path: chart-admin-password
      - name: jenkins-cache
        emptyDir: {}
      - name: jenkins-home
        persistentVolumeClaim:
          claimName: jenkins
      - name: sc-config-volume
        emptyDir: {}
      - name: tmp-volume
        emptyDir: {}
---
# Source: jenkins/templates/tests/test-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: jenkins-tests
  namespace: continuous-integration
  annotations:
    "helm.sh/hook": test
data:
  run.sh: |-
    @test "Testing Jenkins UI is accessible" {
      curl --retry 48 --retry-delay 10 jenkins:8080/login
    }
---
# Source: jenkins/templates/tests/jenkins-test.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "jenkins-ui-test-9es2p"
  namespace: continuous-integration
  annotations:
    "helm.sh/hook": test-success
spec:
  initContainers:
    - name: "test-framework"
      image: "bats/bats:1.2.1"
      command:
        - "bash"
        - "-c"
      args:
        - |
          # copy bats to tools dir
          set -ex
          cp -R /opt/bats /tools/bats/
      volumeMounts:
      - mountPath: /tools
        name: tools
  containers:
    - name: jenkins-ui-test
      image: jenkins/jenkins:2.437-jdk17
      command: ["/tools/bats/bin/bats", "-t", "/tests/run.sh"]
      volumeMounts:
      - mountPath: /tests
        name: tests
        readOnly: true
      - mountPath: /tools
        name: tools
  volumes:
  - name: tests
    configMap:
      name: jenkins-tests
  - name: tools
    emptyDir: {}
  restartPolicy: OnFailure
